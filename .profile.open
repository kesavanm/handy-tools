############################################################################################################
# auth : hi@kesavan.info
# updated : 2018-05-03
#
# PLEASE READ THIS STATEMENT
#
# 1 - dos2unix .profile.open
# 2 - to include this this file into your profile , add the following to your existing profile file
#     .bashrc (recommended)  (or .profile or whatever it is )
#
#     if [ -f ~/.profile.open ]; then
#           . ~/.profile.open
#     fi
#
# Additional packs you may need :
# 1 - .vimrc
# 2 - .todo  & .todo_list
#
# Updated version always avail at
# 1 - https://github.com/kesavanm/handy-tools/  (.profile.open)     [ recommended ]
# 2 - https://kesavan.info/books.pl ( BASH PROFILE )                [ depreciated ]
#
# SELFNOTE - Keep this sync with Work & Home(Z460) & GitHub & Hosting & ownCloud
############################################################################################################

# Enable ERR Reporting
#err_report() { echo "Error on line $1"; }
#trap 'err_report $LINENO' ERR

# Disable ERR Reporting
#trap -  SIGINT SIGQUIT SIGTSTP # only on these exit signals
#trap '' ERR                    # trap off on all exit signals

# INCASE IF YOU'RE IN CYG ENV ON WIN_X , CHANGE THE ENCODINGS
# sed -i 's/\r$//' .profile.open

#I really gonna <3 this
OPEN_PROFILE_VERSION=1.602

# User specific environment and startup programs
PATH=$PATH:$HOME/bin
COLUMNS=250

mkdir -p $HOME/bin ;

CMD_WGET=

#BASIC CMDS
function cmd_wget(){
        # cmd_wget in.ext out.ext
        URL_RAW="https://raw.githubusercontent.com/kesavanm/handy-tools/master/"
        export CMD_WGET="wget -q --no-check-certificate --tries=10 --timeout=20 $URL_RAW/$1 -O $HOME/bin/$2 "
}

#SETUP LOCAL TODO LIST
if [ -f $HOME/bin/.todo ]; then
        touch $HOME/bin/.todo #In-case new to this .profile
else
        echo "no todo manager and list; creating new one for you";
        ping -c 1 raw.githubusercontent.com > /dev/null
        if [[ $? -eq 0 ]] ; then
                cmd_wget ".todo"      ".todo"     ; `$CMD_WGET` ; chmod +x $HOME/bin/.todo;
                cmd_wget ".todo_list" ".todo_list"; `$CMD_WGET` ; chmod +x $HOME/bin/.todo_list;
        else
                echo Appears no active internet connection.Please resolve.
        fi
fi



function cmatrixbuild()
{
  cd $HOME
  git clone https://github.com/abishekvashok/cmatrix.git  >cmatrix.log 2>cmatrix.log
  cd cmatrix
  autoreconf -i  # skip if using released tarball #thanks @manjil
  ./configure --prefix=$HOME --without-fonts >cmatrix.log 2>cmatrix.log
  make >cmatrix.log 2>cmatrix.log
  make install >cmatrix.log 2>cmatrix.log
  cd $HOME
  #  cmatrix
}

function sl_build()
{
  cd $HOME
  git clone https://github.com/Fykec/sl-mac.git > sl.log 2>sl.log
  cd sl-mac
  make
  cp -p sl $HOME/bin && chmod a+x $HOME/bin/sl
  cd $HOME
}

if [ -z $(command -v cmatrix) ];  then
        cmatrixbuild
        #else echo cmatrix there
fi

if [ -z $(command -v sl) ]; then
  sl_build
fi


alias todo="$HOME/bin/.todo"
alias findname="find . -name "
alias grep="grep --color"
alias profile="vim $HOME/.profile"

if [ -f $HOME/.vimrc ] ; then
        alias vim="vim -u $HOME/.vimrc"
fi

#list in numeric mode
lsn(){  ls -l $* | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf("%0o ",k);print}'; }

#Disk Usage
LS(){
if   [ $# -ne 0 ]; then
        for DIR in $*
        do
                du -sh $DIR 2> /dev/null
        done
else
        du -sh `pwd` 2> /dev/null
fi;

}

#show ln only
function lns(){
    ll $*| grep -E '^l';
}
#alias lsmod="ls -l | awk '{k=0;s=0;for( i=0; i <= 8; i++ ){k += ( ( substr( $1, i+2, 1 ) ~ /[rwxst]/ ) * 2 ^( 8 - i ) )}j=4;for( i=4; i <= 10; i += 3 ){ s += ( ( substr( $1, i, 1 ) ~ /[stST]/ )*j);j/=2;} if (k){printf( "%0o%0o ",s,k);} print;}'  "
#alias "lsmod=ls -al|awk '{k=0;s=0;for(i=0;i<=8;i++){;k+=((substr(\$1,i+2,1)~/[rwxst]/)*2^(8-i));};j=4;for(i=4;i<=10;i+=3){;s+=((substr(\$1,i,1)~/[stST]/)*j);j/=2;};if(k){;printf(\"%0o%0o \",s,k);};print;}'"
function kps(){
    ps -eF|head -1;

        if [ $# -eq 1 ] ; then
            ps -eF|grep $1 |grep -v grep;
        else
                for id in "$@"
                do
                   ps -eF|grep "$id" |grep -v grep;
                done
        fi
}

function kps2 (){
    ps u | awk '{
        for ( x=1 ; x<=4 ; x++ ) { printf("%s\t",$x) }
        for ( x=5 ; x<=6 ; x++ ) {  if (NR>1) { printf("%13.2fMb\t",hr=$x/1024) }
        else { printf("\t%s\t",$x)  }
        }
        for ( x=7 ; x<=10 ; x++ ) { printf("%s\t",$x) }
        for ( x=11 ; x<=NF ; x++ ) { printf("%s ",$x) }
        print ""
        }' |
    grep --color -v awk;
}

#---------------------------
# Personnal HANDY Aliases
#---------------------------
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
# -> Prevents accidentally clobbering files.
alias mkdir='mkdir -p'
alias h='history'
alias j='jobs -l'
alias which='type -a'
alias ..='cd ..'
# Pretty-print of some PATH variables:
alias path='echo -e ${PATH//:/\\n}'
alias libpath='echo -e ${LD_LIBRARY_PATH//:/\\n}'
alias du='du -kh' # Makes a more readable output.
alias df='df -kTh'
#-------------------------------------------------------------
# The 'ls' family (this assumes you use a recent GNU ls).
#-------------------------------------------------------------
# Add colors for filetype and human-readable sizes by default on 'ls':
alias ls='ls -h --color'
alias lx='ls -lXB' # Sort by extension.
alias lk='ls -lSr' # Sort by size, biggest last.
alias lt='ls -ltr' # Sort by date, most recent last.
alias lc='ls -ltcr' # Sort by/show change time,most recent last.
alias lu='ls -ltur' # Sort by/show access time,most recent last.
# The ubiquitous 'll': directories first, with alphanumeric sorting:
#alias ll="ls -lv --group-directories-first"
alias ll="ls -lvA"
alias lm='ll |more' # Pipe through 'more'
alias lr='ll -R' # Recursive ls.
alias la='ll -A' # Show hidden files.
alias tree='tree -Csuh' # Nice alternative to 'recursive ls' ...

#php syntax error
alias phpk="php -d display_errors=1 -d error_reporting=E_ALL -l"
alias phpx="php -d xdebug.profiler_output_dir=$HOME/profile -d xdebug.profiler_enable=On"

#-------------------------------------------------------------
# File & strings related functions:
#-------------------------------------------------------------
# Find a file with a pattern in name:
function ff() { find . -type f -iname '*'"$*"'*' -ls ; }
# Find a file with pattern $1 in name and Execute $2 on it:
function fe() { find . -type f -iname '*'"${1:-}"'*' \
    -exec ${2:-file} {} \; ;
}
# Find a pattern in a set of files and highlight them:
# (needs a recent version of egrep).
function fstr() {
    OPTIND=1
    local mycase=""
    local usage="fstr: find string in files.
    Usage: fstr [-i] \"pattern\" [\"filename pattern\"] "
    while getopts :it opt
    do
        case "$opt" in
            i) mycase="-i " ;;
        *) echo "$usage"; return ;;
    esac
done
shift $(( $OPTIND - 1 ))
if [ "$#" -lt 1 ]; then
    echo "$usage"
    return;
    return;
fi
find . -type f -name "${2:-*}" -print0 | \
    xargs -0 egrep --color=always -sn ${case} "$1" 2>&- | more
}
function findtext(){
    if [ "$#" -ne "1" ]; then
            echo "Usage:$FUNCNAME [text to search for]"
    else
            echo "Searching for \"${1}\" in current directory..."
            find . -exec grep -q "$1" '{}' \; -print
    fi
}

function grepnln(){             # Grep it but Don't follow Symb Links
    if [ "$#" -ne "1" ]; then
        msg2 -e "Usage: grepnln [text to search for, but not to follow sym links]"
    else
        find . -type f -exec grep -H $1 '{}' \;  2>/dev/null
    fi
}

function extract() {    # Handy Extract Program
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2) tar xvjf $1 ;;
            *.tar.gz) tar xvzf $1 ;;
            *.bz2) bunzip2 $1 ;;
            *.rar) unrar x $1 ;;
            *.gz) gunzip $1 ;;
            *.tar) tar xvf $1 ;;
            *.tbz2) tar xvjf $1 ;;
            *.tgz) tar xvzf $1 ;;
            *.zip) unzip $1 ;;
            *.Z) uncompress $1 ;;
            *.7z) 7z x $1 ;;
            *) echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}
# Creates an archive (*.tar.gz) from given directory.
function maketar() { tar cvzf "${1%%/}.tar.gz" "${1%%/}/"; }
# Create a ZIP archive of a file or folder.
function makezip() { zip -r "${1%%/}.zip" "$1" ; }
#-------------------------------------------------------------
# Process/system related functions:
#-------------------------------------------------------------
function my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,bsdtime,command ; }
function pp() { my_ps f | awk '!/awk/ && $0~var' var=${1:-".*"} ; }
function killps() {     # kill by process name
    local pid pname sig="-TERM" # default signal
    if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
        echo "Usage: killps [-SIGNAL] pattern"
        return;
    fi
    if [ $# = 2 ]; then sig=$1 ; fi
    for pid in $(my_ps| awk '!/awk/ && $0~pat { print $1 }' pat=${!#} )
    do
        pname=$(my_ps | awk '$1~var { print $5 }' var=$pid )
        if ask "Kill process $pid <$pname> with signal $sig?"
        then kill $sig $pid
        fi
    done
}
function mydf() {   # Pretty-print of 'df' output.
 # Inspired by 'dfc' utility.
    for fs ; do
        if [ ! -d $fs ]
        then
            echo -e $fs" :No such file or directory" ; continue
        fi
        local info=( $(command df -P $fs | awk 'END{ print $2,$3,$5 }') )
        local free=( $(command df -Pkh $fs | awk 'END{ print $4 }') )
        local nbstars=$(( 20 * ${info[1]} / ${info[0]} ))
        local out="["
        for ((j=0;j<20;j++)); do
            if [ ${j} -lt ${nbstars} ]; then
                out=$out"*"
            else
                out=$out"-"
            fi
        done
        out=${info[2]}" "$out"] ("$free" free on "$fs")"
        echo -e $out
    done
}
function myip() {   # Get IP adress on ethernet.
	if [ /sbin/ifconfig eth0 2> /dev/null ] ; then
		MY_IP=$(/sbin/ifconfig eth0 | awk '/inet/ { print $2 } ' |    sed -e s/addr://)
	fi

        [[ -f /etc/sysconfig/network-scripts/ifcfg-bond1 ]] && MYIP2=$(/sbin/ifconfig bond1| awk '/inet/ { print $2 } ' |  sed -e s/addr://)  || MYIP2="No Network bond1"

	#CYGWIN
	if [[ `uname` == *"CYGWIN"* ]]; then
		MY_IP=`ipconfig.exe | grep IPv4 | awk 'NF>1{print $NF}' | head -1`
	fi

    [[ -z $MYIP2 ]]
	MYIP2=$(dig +short myip.opendns.com @resolver1.opendns.com)

    [[ -z $MYIP3 ]]
    MYIP3=$(wget http://ipecho.net/plain -qO-)

    [[ -z $MY_IP ]] &&  IP="$MYIP2" || IP="$MY_IP"
    [[ -z $MY_IP ]] &&  IP="$MYIP3" || IP="$MY_IP"
    echo ${IP:-"Not connected"}
}
function ii() { # Get current host related info.
    echo -e "\nYou are logged on ${BRed}$HOST"
    echo -e "\n${BRed}Additionnal information:$NC " ; uname -a
    echo -e "\n${BRed}Users logged on:$NC " ; w -hs |
    cut -d " " -f1 | sort | uniq
    echo -e "\n${BRed}Current date :$NC " ; date
    echo -e "\n${BRed}Machine stats :$NC " ; uptime
    echo -e "\n${BRed}Memory stats :$NC " ; free
    echo -e "\n${BRed}Diskspace :$NC " ; mydf / $HOME
    echo -e "\n${BRed}Local IP Address :$NC" ; my_ip
    echo -e "\n${BRed}Open connections :$NC "; netstat -pan --inet;
    echo
}

mydiff(){
    if [ $# -ne 2 ] ; then {
        echo "Usage: $FUNCNAME <old-file> <new-file>";
        return 0;
    }
    fi
        diff    --old-line-format="%dn %L"      --new-line-format="%dn %L"\
        --old-group-format=$'\e[0;31m%<\e[0m'   --new-group-format=$'\e[0;32m%>\e[0m'\
        --unchanged-group-format="" $1 $2
}

#GIT Version Control

#alias  gls="git log --pretty=format:\"%h%x09%an%x09%ad%x09%s\""
alias    gl="git log"
alias    gs="git status --untracked-files=no"
alias   gls="git log --date=local --pretty=format:\"%h%x09%C(cyan)%an%x09%ad:%Creset %s\""
alias gwalk="git log --stat --oneline --pretty=format:\"%h - %an, %ar : %s\"  --walk-reflogs"
alias   gfp="git fetch origin && git pull"
alias   gld="git log  --date=short --pretty=format:\"%h%x09%C(cyan)%an%x09%ad:%Creset %s\" --all --"
function gll(){
  if [ $# -ne 1 ] ; then {
      echo "Usage: $FUNCNAME deleted-file";
      return 0;
  }
  fi

  gls --all -- **/$1.*
}
##############################################
#   TOOL (1) datec - Quickly find your age
##############################################

datec(){
    echo `mysql -uUSER -pPASSWORD -e "SELECT MYDB.getDateDifferenceString('$1',NOW()) AS 'Difference is:'" `
}
#mysql> show create function kesavan.getDateDifferenceString \G
#*************************** 1. row ***************************
#           Function: getDateDifferenceString
#            sql_mode:
#     Create Function: CREATE DEFINER=`root`@`localhost` FUNCTION `getDateDifferenceString`(date1 DATE, date2 DATE) RETURNS varchar(30) CHARSET latin1
#RETURN CONCAT(    @years := TIMESTAMPDIFF(YEAR, date1, date2),  IF (@years = 1, ' year, ', ' years, '),    @months := TIMESTAMPDIFF(MONTH, DATE_ADD(date1, INTERVAL @years YEAR), date2),  IF (@months = 1, ' month, ', ' months, '),    @days := TIMESTAMPDIFF(DAY, DATE_ADD(date1, INTERVAL @years * 12 + @months MONTH), date2),  IF (@days = 1, ' day', ' days')  )
#character_set_client: latin1
#collation_connection: latin1_swedish_ci
#  Database Collation: latin1_swedish_ci
#1 row in set (0.00 sec)


##################################################
#   TOOL (2) software - List of software packs
##################################################

software() { if [ $# -ne 1 ] ; then { echo "Usage: software <pack>"; }
        else dpkg -l "*$@*"; fi
     }
#alias software="dpkg -l *$1* "

#################################################################
#   TOOL (3) cleanit - Remove unwanted logs & free more space
#################################################################

cleanit() {
if [ $# -ne 0 ] ; then { echo  "Usage: $1" ;  }
else {  DIR='/var/log' ;
    find $DIR -maxdepth 1 -type f -size +1M -exec ls -lhS {} \; | awk '{ print $5,"",$9 }'|sort -nr | head -10
    echo -n "Clean top 5? [y|n]:" ;
    read -n 1 choice
    echo
    if [ $choice == "y" ] ; then {
        echo -n Cleaning system...
        find $DIR -maxdepth 1 -type f -size +1M -exec ls -lhS {} \; | awk '{ print $9 }'|sort -nr | head -5|xargs rm -f
        echo System cleaned status!
        find $DIR -maxdepth 1 -type f -size +1M -exec ls -lhS {} \; | awk '{ print $5,"",$9 }'|sort -nr | head -10
    }
    else echo "System NOT CLEANED";
    fi
}
fi
}

##############################################################
#   TOOL (4) yt - List the WebM cache files in local disk
##############################################################

yt(){
        # HTML 5
        find ~/.mozilla/firefox/*.default/ -type f -size +100k -ls|awk '{printf $11 "\n"}'|xargs file|grep -i webm|awk -F: '{printf $1 "\n"}'

        # Flash Video
        find ~/.mozilla/firefox/*.default/ -type f -size +100k -ls|awk '{printf $11 "\n"}'|xargs file|grep -i 'Flash Video'|awk -F: '{printf $1 "\n"}'

}
yt2(){

        # This shows mozilla-media-cache/media_cache (deleted) which is cache of HTML5
        FX='';
        FX=`ps -ef|grep '/usr/lib/firefox/firefox'|grep -v grep|head -1|awk '{printf $2}'`
        if [ $FX != '' ] ; then {
                echo /proc/$FX/fd/;
                ll /proc/$FX/fd/|grep media_cache
        }
        else echo 'No running firefox';return 0;
        fi;

}

#################################################################
#       TOOL (5) cleandebs Remove unwanted debs & free more space
#################################################################
function cleandebs(){
        echo " Going to run the following:
                sudo aptitude clean
                sudo aptitude install localepurge       # removes unneeded locale files and localized man page
                sudo apt-get install deborphan          # removes orphaned packages
                sudo deborphan | xargs sudo apt-get -y remove –purge
                ";

        echo -n "Clean the debian orphan files? You may need to run as root/sudo ? [y|n]:" ;
        read -n 1 choice
        echo
        if [ $choice == "y" ] ; then {
                #sudo aptitude clean;
                sudo apt-get clean
                #sudo aptitude install localepurge
                sudo apt-get install deborphan
                #sudo deborphan | xargs sudo apt-get -y remove –purge
                sudo deborphan | xargs sudo apt-get -y purge
                sudo apt autoremove
        }
        else echo "Debian orphan files not cleaned";
        fi
}

function msg(){
    # http://askubuntu.com/questions/99703/how-to-get-colored-output-from-bash-script
    # $1 - msg
    # $2 - format  {greet ,warning, okay/good/positive , no/bad/negative,ul}
    # $3 - extra , passed to echo as it is
    # colors -  0Black,1Red,2Green,3yellow?,4Violet,5Pink,6Magenta,7grey

    B=`tput bold`   #BOLD
    D=`tput dim`    #DIM
    U=`tput sgr 0 1` #UNDERLINE
    U2=`tput smul`  #UNDERLINE2
    NOU=`tput rmul` #NO UNDERLINE
    H=`tput smso`   #HIGHLIGHT
    X=`tput sgr0`   #RESET
    C='tput setaf ' #COLOR

    case "$2" in
        warning     ) i=3; c=`$C$i` && echo $3 $c${H}$1$X;;
        greet       ) i=6; c=`$C$i` && echo $3 $c${B}$1$X;;
        bad|negative    ) i=1; c=`$C$i` && echo $3 $c${H}$1$X;;
        good|okay   ) i=2; c=`$C$i` && echo $3 $c${B}$1$X;;
        bold        )   c=`$C`  && echo $3 ${B}$1$X;;
        ul      )   c=`$C`  && echo $3 ${U}$1$X;;
        ulbold      ) i=2; c=`$C$i` && echo $3 $c${U2}$1$X;;
        normal      ) i=2; c=`$C$i` && echo $3 $c$1$X;;
    esac
}

function msg2(){

        B=`tput bold`    #BOLD
        D=`tput dim`     #DIM
        U=`tput sgr 0 1` #UNDERLINE
        U2=`tput smul`   #UNDERLINE2
        NOU=`tput rmul`  #NO UNDERLINE
        H=`tput smso`    #HIGHLIGHT
        X=`tput sgr0`    #RESET
        C='tput setaf '  #COLOR

        if (( $#  >= 2 )) ; then                        #No  STDIN
                echo -n ;
        else                                            #Has STDIN
              MSG="$(cat -)";
              set -- $1 $MSG
        fi

        OPTIND=1                                        # This saves my life :)

        function msghelp(){
                echo "Valid options:"
                echo "(w)warning,(g)greet,(e)bad|negative|error,(o)good|okay,(b)bold,(u)underline,(l)underline+bold,(n)normal";
                #scenario 1  - echo abcd | msg2 -g
                #scenario 1b - printf xyz| msg2 -l
                #scenario 2  - cat  x.sh | msg2 -w
                #scenario 3  - msg2 -b wow
        }

        while getopts ":w:g:e:o:g:b:u:l:n:" FLAG ; do
        shift
        case "${FLAG}" in
                w|warning       ) i=3; c=`$C$i` && echo $c$H$@$X ;;
                g|greet         ) i=6; c=`$C$i` && echo $c${B}$@$X;;
                e|bad|negative  ) i=1; c=`$C$i` && echo $c${H}$@$X;;
                o|good|okay     ) i=2; c=`$C$i` && echo $c${B}$@$X;;
                b|bold          )       c=`$C`  && echo ${B}$@$X;;
                u|ul            )       c=`$C`  && echo ${U}$@$X;;
                l|ulbold        ) i=2; c=`$C$i` && echo $c${U2}$@$X;;
                n|normal        ) i=2; c=`$C$i` && echo $c$@$X;;
                \?              ) msghelp ;;
        esac
        done

}

function teachme(){
        if [ "$#" -ne "1" ]; then
                msg2 -o "Usage: $FUNCNAME [ pattern to learn something today]"
        else

                msg2 -w 'Be sure to have latest .profile.open & quick-commands content on  ~/bin/.teachme.txt'
                grep --color -in $1 ~/bin/.teachme.txt
        fi
}


# DB functions

alias dbconn="mysql -A -h 123.567.89.10 -ukmuthuvel -pXXXXXXX"

function mydb(){
       if [ "$#" -eq "1" ]; then
                DB=$1
                msg2 -g "DB set to $1";return 0
       fi
       if [ "$DB" ]; then
               msg2 -g "Current DB : $DB"; return 0
       else
               msg2 -e "No db as of now"; echo -n "type the db name:"
               read db;DB=$db; return 0
       fi
}
function myq(){
        if [ -z $DB ]; then  mydb; fi;
        dbconn $DB -te "$*"

}

function mytables(){
        if [ -z $DB ]; then  mydb; fi;
        if [ "$#" -lt "1" ]; then
                msg2 -o "Usage: $FUNCNAME TABLE "
        else
                dbconn $DB -te "show tables like  '%$1%'" ;
        fi
}

function mydesc(){
        if [ -z $DB ]; then  mydb; fi;
        if [ "$#" -lt "1" ]; then
                msg2 -o "Usage: $FUNCNAME TABLE COL1[ COL2 ...] "
        else
                dbconn $DB -te "desc  $1"|egrep "Extra|---|$2"
        fi
}

function myq(){
        if [ -z $DB ]; then  mydb; fi;
        dbconn $DB -te "$*"
}

function parse_git_branch () {
        BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
        if [ -z "$BRANCH" ]; then
                echo "" ;
        else
                $(git status | grep "nothing to commit" > /dev/null 2>&1;)
                if [ "$?" -eq "0" ]; then
                        msg2 -g "($BRANCH)"
                else
                        msg2 -e "{$BRANCH}"
                fi
        fi
}

function parse_git_last_pull(){
        stat -c %y .git/FETCH_HEAD | awk -F'.' '{print $1}'
}

function git_branch(){
    if [ "$#" -ge "1" ]; then
        TMPUSER=$1;
    else
        TMPUSER=$USER;
    fi;
        for i in `find /data/$TMPUSER/ -maxdepth 1 -type d|sort | grep -v brand` ; do cd $i 2>/dev/null ; printf "%s\t%s" "Code:$i" "Branch:" ; BR=`git branch 2>/dev/null | grep \* | awk '{print $2}'`  ; if [ $BR ] ; then msg2 -o $BR ;else msg2 -e 'Not_a_git_repository' ;fi ; cd .. ;  done | awk '{print $1 "\t" $2 }'|column -t
}

function git_branch_status(){
        ORIG=`git branch|grep \* | sed -e 's/\* //g'` ;
        for i in `git branch|sed -e 's/\* //g' -e 's/ //g'` ;
        do git checkout $i 1> /tmp/$USER_git_warings.log;
                if [ /tmp/$USER_git_warings.log ] ; then
                        if [ `grep up-to-date /tmp/$USER_git_warings.log  |wc -l` -eq 0 ] ; then ST='-w' ;  else ST='-g' ; fi ;
                                cat /tmp/$USER_git_warings.log | msg2 $ST  ;
                rm -f /tmp/$USER_git_warings.log; fi ;
                git diff --stat --cached origin/$i ;
        done ;
        git checkout $ORIG ;
}

function git_branch_status2(){
        ORIG=`git branch|grep \* | sed -e 's/\* //g'` ;
        for i in `git branch|sed -e 's/\* //g' -e 's/ //g'`; do
                git checkout $i > /tmp/$USER_git_warings.log;
                if [ `grep up-to-date /tmp/$USER_git_warings.log  |wc -l` -eq 0 ]; then ST='-w'; else ST='-g'; fi;
                GIT_DIFF="git diff --stat --cached origin/$i"
                if [ `$GIT_DIFF  |wc -l` -gt 10 ] ; then
                        msg2 -l "there are `$GIT_DIFF  |wc -l` changes on $i branch";
                        $GIT_DIFF  | head -10 ;
                fi
                $GIT_DIFF 1>/dev/null 2>> /tmp/$USER_git_warings.log;
                if [ $? -ne 0 ] ; then  $GIT_DIFF ; ST='-e'; fi;
                cat /tmp/$USER_git_warings.log | msg2 $ST; rm -i -f /tmp/$USER_git_warings.log;
        done;
        git checkout $ORIG ;
}

function colors(){
#   This file echoes a bunch of color codes to the
#   terminal to demonstrate what's available.  Each
#   line is the color code of one forground color,
#   out of 17 (default + 16 escapes), followed by a
#   test use of that color on all nine background
#   colors (default + 8 escapes).

T='gYw'   # The test text

echo -e "\n  FG/BG          40m     41m     42m     43m\
     44m     45m     46m     47m";

for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
           '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
           '  36m' '1;36m' '  37m' '1;37m';
  do FG=${FGs// /}
  echo -en " $FGs \033[$FG  $T  "
  for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
    do echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m";
  done
  echo;
done
echo

}

alias colors256='perl $HOME/bin/colors256.pl'
alias shred='shred -uvzn 3'
function get_updated_profile()
{
        cd $HOME/bin;
        today=`date +%Y%m%d`
        FILE_IN='.profile.open'; FILE_OUT="new.profile.open.$today";
        echo "looking for latest updates"
        cmd_wget $FILE_IN $FILE_OUT;
        #echo -n 'running command:';msg2 -b "$CMD_WGET";
        `$CMD_WGET`

        new_version=`grep 'OPEN_PROFILE_VERSION' new.profile.open.$today`

        if [[ $? -ne 0 ]] ; then new_version=0.0 ;              # no version history , so start fresh
        else
                INX=`grep 'OPEN_PROFILE_VERSION' new.profile.open.$today | head -1 | awk  '{printf("%s",$1)}'`
                new_version=`echo $INX | tr = \ | awk '{printf $2}'`
        fi

        latest_avail=`bc <<< "$new_version>$OPEN_PROFILE_VERSION"`

        echo new_version : $new_version
        echo curr_version: $OPEN_PROFILE_VERSION
        echo latest_avail: $latest_avail

        if [[ $latest_avail -eq 1  ]] ; then {
                echo "you're using the old version OPEN_PROFILE_VERSION:$OPEN_PROFILE_VERSION while $new_version is avail"
                echo -n "wish to update ? [y|n]: "
                read -n 1 choice
                echo
                if [ $choice == "y" ] ; then {
                        echo updating the profile
                        mv .profile.open .profile.open.bkup.`date +%Y%m%d`
                        mv new.profile.open.$today .profile.open ; chmod a+x .profile.open
                        echo "OPEN_PROFILE updated to OPEN_PROFILE_VERSION:$new_version"
                        echo "your old profile backuped at .profile.open.bkup.`date +%Y%m%d`"
                        echo "save your work,logout & login for update"
                        . ~/bin/.profile.open
                }
                else
                        echo "Okay.You've some urgent work.Will update later"
                fi
        }
        else
                echo "you're using the latest version OPEN_PROFILE_VERSION:$OPEN_PROFILE_VERSION"
        fi
}

function git-log-branch-who()
{
        if [ "$#" -lt "4" ]; then
                echo "Usage: $FUNCNAME -b branch -w developer1 [-w developer2 ...]"
                return 1
        fi
        WHO_LIST='';BRANCH='';
        OPTIND=1                                        # Required when in function() ;
        while getopts ":w:b:" FLAG ; do
        case "${FLAG}" in
                b|branch ) BRANCH=${OPTARG} ;;
                w|who    ) WHO_LIST+=("--author='$OPTARG'") ;;
        esac
        done

        GIT_LOG_BRANCH_WHO="git log --stat --oneline --pretty=format:'%h - %an, %ar :  %s' --walk-reflogs $BRANCH ${WHO_LIST[@]}";
        msg2 -b "${GIT_LOG_BRANCH_WHO}";
        eval $GIT_LOG_BRANCH_WHO ;
}


function git-del(){
  P="$1"
  GIT=$(which git)

  if [ $# -ne 1 ] ;then
          echo "usage : $0 <file/dir> # list on which commit file deleted"
          exit 0 ;
  fi

  for cmt in $($GIT log --pretty=%H -- "${P}"); do
      X=$($GIT ls-tree -r "${cmt}" -- "${P}");
      [[ -z "${X}" ]] && { echo "The folder/file $1 has been deleted in commit: ${cmt}:";
          $GIT  show --name-status "${cmt}";
      }
  done
}


function qls()
{
        #TODO BOGUS VERSION
    RECPARAM=' -maxdepth 1 ';
#    HIDPARAM=" ! -regex '.*/\..*' "
        HIDPARAM="  ! -name '.*'  "
        NUMM=0

    OPTIND=1                                        # This saves my life :)
    while getopts "ar" FLAG; do
        case $FLAG in
                a) echo 'got hid param' ; HIDPARAM=''; NUMM=$(( $NUMM + 1 ))   ;;
                r) echo 'got rec param' ; RECPARAM=''; NUMM=$(( $NUMM + 2 )) ;;
               \?) echo "Invalid option: -$OPTARG" >&2; return 1;;
                *) echo "Wrong choice" ; return 0 ;;
        esac
    done
    shift $((OPTIND-1))

    echo "Value of NUMM is $NUMM "

        # Can be used in indexer v2 ?
        if [ -z $1 ] ; then QLS_DIR='.'; else QLS_DIR="$1"; fi

       # if [ -z "$RECPARAM"  ] ; then echo -n "listing recursive ";NUMM=$(( $NUMM + 2 )) ;  else echo -n "listing locally  " ; fi
       # if [ -z "$HIDPARAM"  ] ; then echo "but including hidden"; NUMM=$(( $NUMM + 1 )) ; else echo "but excluding hidden" ; fi

        CMD="find $QLS_DIR" ;         CMD+=$RECPARAM  ;        CMD+=$HIDPARAM ;
        msg2 '-w' "$CMD " ;

#       LIST=(`$CMD ` )
        unset RECPARAM ; unset HIDPARAM ;
        unset $RECPARAM ; unset $HIDPARAM ;

#       printf '%s\n' "${LIST[@]}";

        case "$NUMM" in
                '0')    echo "with no option ; default mode ; searching $QLS_DIR locally , non-recursive & non-hidden";
                        LIST_R=(`find $QLS_DIR -maxdepth 1 ! -name '.*'`) ;
                        ;;
                '1')    echo "with  a option ;     all mode ; searching $QLS_DIR locally    , non-recursive & hidden ";
                        LIST_R=(`find $QLS_DIR -maxdepth 1  `) ;
                        ;;
                '2')    echo "with  r option ;     rec mode ; searching $QLS_DIR non-local  , recursivelly  & non-hidden";
                        LIST_R=(`find $QLS_DIR ! -name '.*'`) ;
                        ;;
                '3')    echo "with  a&r option;   all+rec mode ; searching $QLS_DIR non-local,recursivelly  & hidden";
                        LIST_R=(`find $QLS_DIR`) ;
                        ;;
        esac

        NUMM=

#        for element in $(seq 0 $((${#arrayname[@]} - 1)))
#        do
#                echo "${arrayname[$element]}"
#        done


#       for i in ${LIST[@]} ;
        for i in ${LIST_R[@]} ;
        do
#                echo "running for $i \n "
                if [ -d $i ] ; then
                        echo `ls --color=never -dl $i && file -b $i`;
                else
                        echo `ls --color=never -hl $i && file -b $i`;
                fi;
        done


        LIST_R=()

        function qls_htm(){
                for i in `ls -R . --color=never | awk '/:$/&&f{s=$0;f=0} /:$/&&!f{sub(/:$/,"");s=$0;f=1;next} NF&&f{ print s"/"$0 }'`;     do  echo -n `ls --color=never -hl  --time-style=+"%Y-%m-%d %H:%M:%S" $i  | awk '{print "<tr>  <td> "  $1 "</td>   <td> " $3   " </td>  <td>" $5  " </td>  <td>"   $6 " </td>  <td>" $8  "</td> </td>"}' && file -b $i ` ;  echo " </td> </tr>" ;      done

        }

        return 0 ;
}

function statc(){
  #echo zero is $0;echo one is $1
  if [ "$#" != 1 ] ; then
    echo "usage: $0 /path/to/file.ext";
    exit 127 ;
  fi ;

  if [ -d $1 ] ;
    then echo `ls --color=never -dl $1 && file -b $1`
    else echo `ls --color=never -hl $1 && file -b $1`
  fi
  return 0;
}

function battery(){
  #for old kernel
  #upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep -E "state|to\ full|percentage"
  #current status & percentage
  echo -n $(cat /sys/class/power_supply/BAT0/status) :  $(echo "scale=2;
    $(cat /sys/class/power_supply/BAT0/charge_now)*100/$(cat /sys/class/power_supply/BAT0/charge_full)"| bc)%
  echo  $(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep -E --color=no "to\ full")
  return 0;
}

function ps1-stat(){
        if [ "$#" -lt "1" ]; then
                echo "Usage: $FUNCNAME [short|sweet|normal|full]"
                echo "current ps1-stat is $ps1_status"
                return 0
        fi
        echo "setting $1 as ps1-stat now"
        export ps1_status=$1
        f_ps1  ;
        return 0
}




###################################### COLORS ##################################################
#  REGULAR               BOLD                           UNDERLINE                BACKGROUND
   BLACK="\[\e[0;30m\]";  BOLD_BLACK="\[\e[1;30m\]";   UL_BLACK="\[\e[4;30m\]";  BG_BLACK="\e[40m\]";
     RED="\[\e[0;31m\]";    BOLD_RED="\[\e[1;31m\]";     UL_RED="\[\e[4;31m\]";    BG_RED="\e[41m\]";
   GREEN="\[\e[0;32m\]";  BOLD_GREEN="\[\e[1;32m\]";   UL_GREEN="\[\e[4;32m\]";  BG_GREEN="\e[42m\]";
  YELLOW="\[\e[0;33m\]"; BOLD_YELLOW="\[\e[1;33m\]";  UL_YELLOW="\[\e[4;33m\]"; BG_YELLOW="\e[43m\]";
    BLUE="\[\e[0;34m\]";   BOLD_BLUE="\[\e[1;34m\]";    UL_BLUE="\[\e[4;34m\]";   BG_BLUE="\e[44m\]";
  PURPLE="\[\e[0;35m\]"; BOLD_PURPLE="\[\e[1;35m\]";  UL_PURPLE="\[\e[4;35m\]"; BG_PURPLE="\e[45m\]";
    CYAN="\[\e[0;36m\]";   BOLD_CYAN="\[\e[1;36m\]";    UL_CYAN="\[\e[4;36m\]";   BG_CYAN="\e[46m\]";
   WHITE="\[\e[0;37m\]";  BOLD_WHITE="\[\e[1;37m\]";   UL_WHITE="\[\e[4;37m\]";  BG_WHITE="\e[47m\]";
 NO_COLOUR="\[\e[0m\]";          # Text Reset
####################################################################################################

function f_ps1(){

        if [ -z "$ps1_status" ] ; then
                export ps1_status='normal';
        fi

       # [short|sweet|normal|full|auto]
        success="\342\234\223 success ^_^"; fail="\342\234\227 failed O_O" # tick marks showing last operation status

        if [ "$ps1_status" == 'full' ] ; then

          free=$(df . -aT | tail -1 | awk '{printf $5}')
          PS1="$GREEN\u@\h$YELLOW($(myip))|$CYAN\jjobs|\$(/usr/bin/tty|/bin/sed -e 's:/dev/::')|$PURPLE\w|$GREEN\$(/bin/ls -1|/usr/bin/wc -l|/bin/sed 's: ::g')files \$(/bin/ls -lah | /bin/grep -m 1 total | /bin/sed 's/total //')b$PURPLE|$free free|\D{%F %T}$RED\$(parse_git_branch)$NO_COLOUR\n\$"
        PS1="$BOLD_WHITE[\!]\$?\$(if [[ \$? == 0 ]];then echo \"$BOLD_GREEN $success \";else echo \"$BOLD_RED $fail \";fi)$NO_COLOUR ________________________________________________________________________________\n$PS1"
        fi

        if [ "$ps1_status" == 'normal' ] ; then

        PS1="$GREEN\u@\h$YELLOW($(myip))|$GREEN\w$PURPLE|\D{%F %T}$RED\$(parse_git_branch)$NO_COLOUR\n\$"
        PS1="$BOLD_WHITE\$?\$(if [[ \$? == 0 ]];then echo \"$BOLD_GREEN $success \";else echo \"$BOLD_RED $fail \";fi)$NO_COLOUR ________________________________________________________________________________\n$PS1"
#       PS1='$(printf "%*s\r%s" $(( COLUMNS-1 )) "[$(git branch 2>/dev/null | grep '^*' | sed s/..//)] $(date +%H:%M:%S)" "$GREEN\u@\h$YELLOW($(myip))|$GREEN\w")'
        fi

        if [ "$ps1_status" == 'sweet' ] ; then

        PS1="$GREEN\u@\h$YELLOW($(myip))|$GREEN\w$RED\$(parse_git_branch)$NO_COLOUR\n\$"
        PS1="$BOLD_WHITE\$?\$(if [[ \$? == 0 ]];then echo \"$BOLD_GREEN $success \";else echo \"$BOLD_RED $fail \";fi)$NO_COLOUR __________________________________________\n$PS1"
        fi

        if [ "$ps1_status" == 'short' ] ; then
        PS1="$BOLD_WHITE\$?$GREEN\u@\h|$YELLOW\w$NO_COLOUR\$"
        fi
}

f_ps1 ;
HISTTIMEFORMAT="%F %T "

#fzf
alias fzf="$HOME/.fzf/bin/fzf"
alias  fz="fzf --preview 'cat {} 2> /dev/null | head -50'"          # Expose binary
alias  fz='fzf --preview
            "[[ $(file --mime {}\) =~ binary ]] &&  echo {} is a binary file ||
            (highlight -O ansi -l {} || coderay {} || rougify {} ||  cat {}) 2> /dev/null |
            head -500"'
alias fz2="fzf --height 40% --reverse --preview 'file {}' --preview-window down:1"

shopt -s nocaseglob # to match case insensitive patterns with ls?

#daily weather report
zip=$(curl ipinfo.io/$(myip) 2>&1| grep postal |awk '{print $2}'|sed -r 's/"//g')

# check for US zip
if [ ${#zip} -eq '5' ] ; then
  curl wttr.in/$zip
else
  city=$(curl ipinfo.io/$(myip) 2>&1| grep city |awk '{print $2}'|sed -r 's/"//g')
  curl wttr.in/$city
fi

# default zip if no zip retrieveable
if [[ -z "$zip" ]]; then
  zip=77477
fi


msg2 -g "Be lazy" ; msg2 -g "Be always double lazy"
msg2 -o "You're using OPEN_PROFILE_VERSION : $OPEN_PROFILE_VERSION. run get_updated_profile for latest from internet"
msg2 -w "Your #TODO action(s)"  ;  todo;
msg2 -g "Try to learn something with 'teachme' today"

#Get into MATRIX
#/home/kmuthuvel/bin/cmatrix -s
$(command -v cmatrix)
